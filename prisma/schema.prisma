//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  organizationRoles OrganizationRole[]
  pwaSubscriptions  PwaSubscription[]  @relation("user")
  ideas             Idea[]             @relation("user")
  workspaces        Workspace[]        @relation("user")
  workspaceMembers  WorkspaceMember[]  @relation("user")
  comments          Comment[]          @relation("user")
  notifications     Notification[]     @relation("user")
}

/// @@allow('all', true)
model Idea {
  id             String          @id() @default(uuid())
  title          String
  description    String?
  status         String
  visibility     String
  category       String?
  complexity     String?
  stage          String?
  industry       String?
  userId         String
  user           User?           @relation(fields: [userId], references: [id], name: "user")
  organizationId String
  organization   Organization?   @relation(fields: [organizationId], references: [id], name: "organization")
  workspaceIdeas WorkspaceIdea[] @relation("idea")
  comments       Comment[]       @relation("idea")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Workspace {
  id               String            @id() @default(uuid())
  name             String
  description      String?
  privacy          String
  organizationId   String
  organization     Organization?     @relation(fields: [organizationId], references: [id], name: "organization")
  userId           String
  user             User?             @relation(fields: [userId], references: [id], name: "user")
  workspaceMembers WorkspaceMember[] @relation("workspace")
  workspaceIdeas   WorkspaceIdea[]   @relation("workspace")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WorkspaceMember {
  id          String     @id() @default(uuid())
  role        String
  permission  String
  workspaceId String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], name: "workspace")
  userId      String
  user        User?      @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model WorkspaceIdea {
  id          String     @id() @default(uuid())
  workspaceId String
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], name: "workspace")
  ideaId      String
  idea        Idea?      @relation(fields: [ideaId], references: [id], name: "idea")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Comment {
  id        String   @id() @default(uuid())
  content   String
  ideaId    String
  idea      Idea?    @relation(fields: [ideaId], references: [id], name: "idea")
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id        String   @id() @default(uuid())
  type      String
  content   String
  read      Boolean
  priority  Float
  userId    String
  user      User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
  ideas            Idea[]             @relation("organization")
  workspaces       Workspace[]        @relation("organization")
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', true)
model PwaSubscription {
  id        String   @id() @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt()
  userId    String
  user      User     @relation(fields: [userId], references: [id], name: "user")
}
